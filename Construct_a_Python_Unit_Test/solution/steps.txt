***************************************************************
*** Task 1: Write Happy Path Test                           ***
***************************************************************
** Step 1 **
cd working_directory

** Step 2 **
pipenv install pytest 

** Step 3 **
pipenv install coverage

** Step 4 **
pipenv shell

** Step 8 **
class TestHappyPath: 
    def test_add_subject_to_student(self, student, subject): 
        assert student.add_subject(subject) is True

** Step 9 **
cd /home/student/working_directory/program

pytest test_grades_happypath.py 

** Step 10 **
def test_add_grade_to_subject(self, student, subject): 
        student.add_subject(subject) 
        assert student.set_grade(subject, 8) is True

** Step 11 **
def test_get_subject_grade(self, student, subject):
        student.add_subject(subject) 
        student.set_grade(subject, 8) 
        student.set_grade(subject, 9) 
        assert student.get_grades_for_subject(subject) == [8, 9]

** Step 12 **
def test_get_subject_avg(self, student, subject): 
        student.add_subject(subject) 
        student.set_grade(subject, 8) 
        student.set_grade(subject, 9) 
        assert student.get_subject_avg(subject) == '8.50'

** Step 14 **
pytest test_grades_happypath.py

***************************************************************
*** Task 2: Make Test Pass                                  ***
***************************************************************
** Step 1 **
def add_subject(self, subject):
    self.subjects.append(subject) 
    return True

** Step 2 **
def set_grade(self, subject, grade):
   self.grades.append((subject, grade)) 
   return True

** Step 3 **
def get_grades_for_subject(self, subject): 
    grades = [] 
    for grade in self.grades: 
        grades.append(grade[1]) 

     return grades

** Step 4 **
pytest test_grades_happypath.py 

***************************************************************
*** Task 3: Write Error Path Tests                          ***
***************************************************************
** Step 2 **
def test_add_empty_subject_to_student(self, student, subject): 
        assert student.add_subject(None) is False

** Step 3 **
    def test_add_existing_subject_to_student(self, student, subject): 
        student.add_subject(subject) 
        assert student.add_subject(subject) is False

** Step 4 **
    def test_add_higher_grade_to_subject(self, student, subject): 
        student.add_subject(subject) 
        with pytest.raises(ValueError): 
            student.set_grade(subject, 11)

** Step 5 **
     def test_add_lower_grade_to_subject(self, student, subject): 
        student.add_subject(subject) 
        with pytest.raises(ValueError): 
            student.set_grade(subject, -1)

** Step 6 **
    def test_add_zero_grade_to_subject(self, student, subject): 
        student.add_subject(subject) 
        with pytest.raises(ValueError): 
            student.set_grade(subject, 0)â€ƒ

** Step 7 **
    def test_get_none_subject_grade(self, student, subject): 
        student.add_subject(subject) 
        student.set_grade(subject, 8) 
        assert student.get_grades_for_subject(None) is False

** Step 8 **
    def test_get_missing_subject_grade(self, student, subjects): 
        student.add_subject(subjects[0]) 
        student.add_subject(subjects[1]) 
        student.set_grade(subjects[0], 8) 
        assert student.get_grades_for_subject(subjects[1]) == []

** Step 9 **
pytest test_grades_errorpath.py 

***************************************************************
*** Task 4: Refine Code to Catch Errors                     ***
***************************************************************
** Step 1 **
    def add_subject(self, subject):
        if subject: 
            if subject not in self.subjects: 
                self.subjects.append(subject) 
                return True 
            else: 
                return False 
        else: 
            return False

** Step 2 **
    def set_grade(self, subject, grade): 
        if (subject and grade) or (subject and grade is int(0)): 
            if subject in self.subjects: 
                if grade < 1 or grade > 10: 
                    raise ValueError('grade out of bound', grade) 
                else: 
                    self.grades.append((subject, grade)) 
                    return True 

            else: 
                raise ValueError('no subject or grade', subject) 
        else: 
            return False

** Step 3 **
    def get_grades_for_subject(self, subject): 
        if subject: 
            grades = [] 
            for grade in self.grades: 
                if grade[0] is subject: 
                    grades.append(grade[1]) 
        else: 
            return False 

        return grades

** Step 4 **
pytest test_grades_errorpath.py

** Step 5 **
coverage run --source student -m pytest test_grades_errorpath.py 

** Step 6 **
coverage report 